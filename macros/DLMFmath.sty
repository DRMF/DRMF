%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Mathematical Macros for DLMF
% Bruce R. Miller (bruce.miller@nist.gov)
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{DLMFmath}[2000/12/20 Math Macros for DLMF]
% Added \cfrac macros to support inline.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\@ifundefined{if@utopiafont}{\newif\if@utopiafont\@utopiafontfalse}{}
\if@utopiafont\else
\IfFileExists{mathrsfs.sty}{\RequirePackage{mathrsfs}}{\let\mathscr\mathcal}
\fi
%\let\mathscr\mathcal
%______________________________________________________________________
% General Math Constructs

%\newcommand{\eqnum}[1]{\tag{#1}\label{#1}}
\DeclareRobustCommand{\eqnum}[1]{\label{#1}}

\DeclareRobustCommand{\Real}{\mathbb{R}}
\DeclareRobustCommand{\Complex}{\mathbb{C}}
\DeclareRobustCommand{\NatNumber}{\mathbb{N}}
\DeclareRobustCommand{\Integer}{\mathbb{Z}}
% A bit controversial, but we need an unambiguous name, even
% if the display will be debated...
\DeclareRobustCommand{\PosInteger}{{\mathbb{Z}^{+}}}
\DeclareRobustCommand{\NonNegInteger}{{\mathbb{Z}^{*}}}
\DeclareRobustCommand{\Rational}{\mathbb{Q}}
\DeclareRobustCommand{\Polynomial}{\mathbb{P}}
\DeclareRobustCommand{\HalfComplex}{\mathbb{H}} % Upper half of complex plane

\DeclareRobustCommand{\realpart}[1]{\Re {#1}}
\DeclareRobustCommand{\imagpart}[1]{\Im {#1}}
\DeclareRobustCommand{\conj}[1]{\overline{#1}}
\DeclareRobustCommand{\iunit}{{i}}
\DeclareRobustCommand{\expe}{{e}}
\DeclareRobustCommand{\cpi}{{\pi}}
\DeclareRobustCommand{\diffd}{{d}}

%\newcommand{\ph}{\operatorname{ph}}
%\newcommand{\ph}{\mathop{\mathrm{ph}}\nolimits}
%\def\sign{\mathop{\mathrm{sign}}\nolimits}

% Would be nice if we could have these aligned, or flush right.
% (\hfil doesnt work in math mode though)
% \newcommand{\constraint}[1]{\quad\mbox{$#1$}}

% Printing numbers in scientific notation.
%   \Sci{mantissa}{exponent}
% Can be in math or text modes.
% For aligning on the decimal in tables, use
%   \TSci{mantissa}{exponent}
% The column should be defined as "r@{}l",
% since it actually uses two columns.
\def\Sci#1#2{\ensuremath{#1}\Sci@Exp{#2}}
\def\TSci#1#2{\TSci@#1..\end\Sci@Exp{#2}}
\def\TSci@#1.#2.#3\end{$#1.$&$#2$}
\def\Sci@Exp#1{%
   \edef\@exp{#1}%
   \ifx\@exp\@empty\else\ensuremath{\times10^{#1}}\fi}

%______________________________________________________________________
% Sets

\DeclareRobustCommand{\cartprod}{\times}
\DeclareRobustCommand{\setmod}{/}

%______________________________________________________________________
% Simple operators
\DeclareRobustCommand{\divides}{\mathbin{|}}
\newcommand{\abs}[1]{\left|#1\right|}

% Cardinality of a set.
\DeclareRobustCommand{\card}[1]{\left|#1\right|}
% Parenthetical notation for gcd n-ary
\DeclareRobustCommand{\pgcd}[1]{\left(#1\right)}
\DeclareRobustCommand{\power}[2]{{#1^{#2}}}

%______________________________________________________________________
\DeclareRobustCommand{\selection}[1]{\;\begin{matrix}#1\end{matrix}\;}
\DeclareRobustCommand{\rselection}[1]{\left.\begin{matrix}#1\end{matrix}\right\}}
\DeclareRobustCommand{\lselection}[1]{\left\{\begin{matrix}#1\end{matrix}\right.}
\DeclareRobustCommand{\lrselection}[1]{\left\{\begin{matrix}#1\end{matrix}\right\}}
%______________________________________________________________________

%\newcommand{\ifrac}[2]{{#1}/{#2}}
% Variable size /
\DeclareRobustCommand{\ifrac}[2]{\left.{#1}\middle/{#2}\right.}

% \opminus creates a (-) typically used in summations
% This approach keeps it from being seen as a binary operator
% so breqn wont split.
%\DeclareMathSymbol{\minussign}{\mathalpha}{symbols}{"00}
%\newcommand{\opminus}{(\minussign)}
% Redefined to be explicit
\DeclareRobustCommand{\opminus}{(-1)}

% Modify \cfrac so that it supports an `Inline' style.
% Since recursive \cfrac's (in the denominator) now get placed at the
% top level, we've got to recognize that structure and pull them out.
% Since \cdots (and terminating continumed frac, if a \cfrac immediately
% follows the \cdots) also need to be treated specially, those are grabbed too.
% NOTE: the analogous effect for the regular cfrac isn't quite right,
% I think; shouldn't the cdots be more diagonal & the remaining cfrac lowered?

\def\cfracstyle#1{\def\cfrac@style{#1}} % d for display style (expanded) Or i for inline.
\cfracstyle{i}                  % Default for DLMF is inline.
% This alternative puts the zigzag divider; But its height needs to match!
\def\fancycfracsep{\!\bigg\rfloor\strut\kern-5.15pt\bigg\lceil\!}
\let\cfracsep\;                 % just space between inline cfracs

\def\cfrac{%
  \@ifnextchar[{\cfrac@a}{\cfrac@a[c]}} %]
\def\cfrac@a[#1]#2#3{
  \def\cfrac@pos{#1}\def\cfrac@num{#2}% save for \cfrac@z
  \if i\cfrac@style \cfrac@b#3\cdots @% check for presence of \cdots
  \else \cfrac@z{#3}\kern-\nulldelimiterspace% normal display format
  \fi}
\def\cfrac@b#1\cdots#2@{
  \if !#2!\cfrac@c#1\cfrac @%  No cdots, check for recursive \cfrac
  \else \cfrac@z{#1{}}\cfracsep \cdots\cfrac@d#2
  \fi}
\def\cfrac@c#1\cfrac#2@{
  \if !#2!\cfrac@z{#1}%  Last fraction
  \else \cfrac@z{#1{}}\cfracsep\cfrac@e#2
  \fi}
\def\cfrac@d#1\cdots{
  \if !#1!\else \cfracsep #1\fi}
\def\cfrac@e#1\cfrac{\cfrac#1}
\def\cfrac@z#1{{\if i\cfrac@style\else\displaystyle\fi\frac{% from the original \cfrac
  \strut\if r\cfrac@pos\hfill\fi\cfrac@num\if l\cfrac@pos\hfill\fi}{#1}}}

%______________________________________________________________________
% Sometimes you want a middle symbol to grow with an expression.
% These will work if a single or double vertical bar is enough:
%  eg. \left(a+b\midvert c+d\right)
\def\midvert{\:\vrule\:} 
\def\midVert{\:\vrule\,\vrule\:}

\DeclareRobustCommand{\floor}[1]{\left\lfloor#1\right\rfloor}
\DeclareRobustCommand{\ceiling}[1]{\left\lceil#1\right\rceil}

%======================================================================
% CALCULUS
%
% Various derivatives and differential operators.
% Generally take an optional argument [n] for the nth derivative
% or nth power of a differential operator.
% And a last argument for the index/variable of differentiation.
% The q-variants get an extra argument, but first, for the q.
%______________________________________________________________________
% \deriv{A}{B}     : Derivative of A with respect to B
% \deriv[N]{A}{B}  : N-th derivative of A w.r.t B  (N is optional)
% \pderiv{A}{B}    : Partial derivative of A w.r.t B
% \pderiv[N]{A}{B} : N-th partial derivative of A w.r.t B  (N is optional)

% Additional variants with a "t" (for text) or "i" (for inline) prefix,
% inspired by amsmath's \tfrac.
%
% \diff{x}         : differential of x.  Should be used in integrands.

% Since special functions are often marked up as \mathop, to give
% some extra space before, we patch up here with the d & \partial's
% wrapped with \mathopen to tighten them up.  Odd, but works.

\def\deriv{\@ifnextchar[{\@derivn}{\@deriv}}%]
\def\@derivn[#1]#2#3{\frac{\mathopen{d^{#1}}#2}{{\mathopen{d}#3}^{#1}}}
\def\@deriv#1#2{\frac{\mathopen{d}#1}{\mathopen{d}#2}}
% Text style
\def\tderiv{\@ifnextchar[{\@tderivn}{\@tderiv}}%]
\def\@tderivn[#1]#2#3{\tfrac{\mathopen{d^{#1}}#2}{{\mathopen{d}#3}^{#1}}}
\def\@tderiv#1#2{\tfrac{\mathopen{d}#1}{\mathopen{d}#2}}
% inline style
\def\ideriv{\@ifnextchar[{\@iderivn}{\@ideriv}}%]
\def\@iderivn[#1]#2#3{\ifrac{\mathopen{d^{#1}}#2}{{\mathopen{d}#3}^{#1}}}
\def\@ideriv#1#2{\ifrac{\mathopen{d}#1}{\mathopen{d}#2}}

\def\pderiv{\@ifnextchar[{\@pderivn}{\@pderiv}}%]
\def\@pderivn[#1]#2#3{\frac{\mathopen{\partial^{#1}}#2}{{\mathopen{\partial}#3}^{#1}}}
\def\@pderiv#1#2{\frac{\mathopen{\partial}#1}{\mathopen{\partial}#2}}
% Text style
\def\tpderiv{\@ifnextchar[{\@tpderivn}{\@tpderiv}}%]
\def\@tpderivn[#1]#2#3{\tfrac{\mathopen{\partial^{#1}}#2}{{\mathopen{\partial}#3}^{#1}}}
\def\@tpderiv#1#2{\tfrac{\mathopen{\partial}#1}{\mathopen{\partial}#2}}
% inline style
\def\ipderiv{\@ifnextchar[{\@ipderivn}{\@ipderiv}}%]
\def\@ipderivn[#1]#2#3{\ifrac{\mathopen{\partial^{#1}}#2}{{\mathopen{\partial}#3}^{#1}}}
\def\@ipderiv#1#2{\ifrac{\mathopen{\partial}#1}{\mathopen{\partial}#2}}

%______________________________________________________________________
% Differential Operators
% \Deriv[n]{z} => D^2_z
% \qDeriv[n]{q}{z} => D^2_{q,z}
\DeclareRobustCommand{\Deriv}[2][]{\,D^{#1}_{#2}}
\DeclareRobustCommand{\qDeriv}[3][]{\,D^{#1}_{#2,#3}}

%______________________________________________________________________
% Differentials
% \diff[n]{x} => d^n x
% \pdiff[n]{x} => partial^n x
% \qdiff[n]{q}{x} => d^n_q x
\DeclareRobustCommand{\diff}[2][]{\,\mathopen{d^{#1}}{#2}}
\DeclareRobustCommand{\pdiff}[2][]{\,\mathopen{\partial^{#1}}{#2}}
\DeclareRobustCommand{\qdiff}[3][]{\,\mathopen{d^{#1}_{#2}}{#3}}

%______________________________________________________________________
% Difference Operators
% The prefix f,b,c stand for forward, backward, central Difference
\DeclareRobustCommand{\fDiff}[1][]{\,\Delta_{#1}}
\DeclareRobustCommand{\bDiff}[1][]{\,\nabla_{#1}}
\DeclareRobustCommand{\cDiff}[1][]{\,\delta_{#1}}
%______________________________________________________________________
% Integrals
\@ifundefined{pvint}{
\DeclareRobustCommand{\pvint}{
 \mathchoice{\vcenter{\hrule width 8pt height0.5pt}\mkern-19mu}%
            {\vcenter{\hrule width 4pt}\mkern-12.5mu}%
            {\vcenter{\hrule width 3pt}\mkern-11.5mu}%
            {\vcenter{\hrule width 3pt height0.3pt}\mkern-11mu}\intop\ilimits@}
}\relax
%______________________________________________________________________
% Other operators
% These are now handled in DLMFfcns
%\newcommand{\Wronskian}{\mathscr{W}}
%\newcommand{\LaplaceTrans}{\mathscr{L}}
%\newcommand{\VariationalOp}{\mathscr{V}}

\DeclareRobustCommand{\Residue}{\mathop{\operator@font res}}
%______________________________________________________________________
% Linear algebra
% with breqn (? or flexisym?) \boldsymbol causes lowercase greek to be mismapped.
% hopefully we only get simple stuff and comparing to a letter's catcode is enough.
%\newcommand{\Vector}[1]{\boldsymbol{#1}}
%\newcommand{\Matrix}[1]{\boldsymbol{#1}}
% Nope this wont work for complicated arguments.
%\newcommand{\Vector}[1]{\ifcat#1a\mathbf{#1}\else\boldsymbol{#1}\fi}
%\newcommand{\Matrix}[1]{\ifcat#1a\mathbf{#1}\else\boldsymbol{#1}\fi}
% Try this:
\def\@testletter#1#2\done{\ifx.#2.\ifcat#1a11\else01\fi\else01\fi}
\DeclareRobustCommand{\Vector}[1]{%
  \if\@testletter#1\done\mathbf{#1}\else\boldsymbol{{#1}}\fi}
\DeclareRobustCommand{\Matrix}[1]{%
  \if\@testletter#1\done\mathbf{#1}\else\boldsymbol{{#1}}\fi}
\DeclareRobustCommand{\Lattice}[1]{%
  \mathbb{#1}}%

\DeclareRobustCommand{\dotprod}{\cdot}
\DeclareRobustCommand{\crossprod}{\times}

\DeclareRobustCommand{\divergence}{\mathop{\operator@font div}}
\DeclareRobustCommand{\curl}{\mathop{\operator@font curl}}
\DeclareRobustCommand{\gradient}{\mathop{\operator@font grad}}
\DeclareRobustCommand{\transpose}[1]{#1^{\mathrm{T}}}
\DeclareRobustCommand{\trace}{\mathop{\operator@font tr}}
\DeclareRobustCommand{\diag}{\mathop{\operator@font diag}}
%______________________________________________________________________
% Combinatorics
% Keep this defined, but let's use AMS' \binom, \tbinom, \dbinom
%\newcommand{\binomial}[2]{{\textstyle\left(\!{{#1} \atop {#2}}\!\right)}}
\DeclareRobustCommand{\binomial}[2]{\binom{#1}{#2}}
%%\newcommand{\multinomial}[2]{{\left(#1;#2\right)}} %Extra {} to inhibit breaks
\DeclareRobustCommand{\multinomial}[2]{\binom{#1}{#2}}
\DeclareRobustCommand{\pochhammer}[2]{{\left(#1\right)_{#2}}} %Extra {} to inhibit breaks
% Partitional shifted factorial
\DeclareRobustCommand{\psfactorial}[2]{{\left[#1\right]_{#2}}}
% Wigner AKA Clebsch-Gordon Coefficients.
\DeclareRobustCommand{\wigner}[6]{\left(#1\;#2\;#3\;#4 | #1\; #3\; #5\,\,#6\right)}

\DeclareRobustCommand{\Kronecker}[2]{\delta_{#1,#2}}
\DeclareRobustCommand{\LeviCivita}[3]{\epsilon_{#1#2#3}}
\DeclareRobustCommand{\deltaDistribution}[1][]{\delta_{#1}}
\DeclareRobustCommand{\Distribution}[2]{\left\langle #1,#2\right\rangle}
\DeclareRobustCommand{\Schwarzian}[2]{\left\{ #1,#2\right\}}

% q-Extensions to various combinatorics
\DeclareRobustCommand{\qFactorial}[3]{\left(#1;#2\right)_{#3}}
\DeclareRobustCommand{\qBinomial}[3]{\genfrac[]\z@{}{#1}{#2}_{#3}}

% Looks the same as BernoulliB, EulerE w/o args
% However, the convension seems to be: use \BernoulliB, \EulerE w/o args.
%\newcommand{\BernoulliNumber}[1]{B_{#1}}
%\newcommand{\EulerNumber}[1]{E_{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constants
\DeclareRobustCommand{\EulerConstant}{\gamma}
\DeclareRobustCommand{\BoltzmannConstant}{k}

\DeclareRobustCommand{\RydbergConstant}{R_\infty}
\DeclareRobustCommand{\lightspeed}{c}
\DeclareRobustCommand{\finestructure}{\alpha}
\DeclareRobustCommand{\ElectricConstant}{\epsilon_0}% aka vacuum permitivity
\DeclareRobustCommand{\BohrRadius}{a_0}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Include amssymb, too
\if@utopiafont\else
\RequirePackage{amssymb}
\fi
% Undefine digamma since we define it as a function in DLMFfcns
\let\digamma\relax
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Unique Identifiers for all Special Functions
% [ In separate file]
\RequirePackage{DLMFdefun}
\RequirePackage{DLMFfcns}

% And leverage for some special cases.
\DeclareRobustCommand\threej{\@SF@ifnextat{\@threej@args}{\ensuremath{3j}}}
\DeclareRobustCommand\sixj{\@SF@ifnextat{\@sixj@args}{\ensuremath{6j}}}
\DeclareRobustCommand\ninej{\@SF@ifnextat{\@ninej@args}{\ensuremath{9j}}}
\def\@threej@args#1{\@threej@@args}
\def\@sixj@args#1{\@sixj@@args}
\def\@ninej@args#1{\@ninej@@args}
\def\@threej@@args#1#2#3#4#5#6{{\begin{pmatrix}#1&#2&#3\\#4&#5&#6\end{pmatrix}}}
\def\@sixj@@args#1#2#3#4#5#6{{\begin{Bmatrix}#1&#2&#3\\#4&#5&#6\end{Bmatrix}}}
\def\@ninej@@args#1#2#3#4#5#6#7#8#9{{\begin{Bmatrix}#1&#2&#3\\#4&#5&#6\\#7&#8&#9\end{Bmatrix}}}

\def\AbstractJacobi#1#2{\AbstractJacobiPQ{\mathrm{#1#2}}}
\def\arcAbstractJacobi#1#2{\arcAbstractJacobiPQ{\mathrm{arc#1#2}}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


